{"version":3,"names":[],"mappings":"","sources":["ssp.js"],"sourcesContent":["import _ from 'lodash';\n\nmodule.exports = { generate, verify };\n\n// Will generate an array of random integers of `length`, where\n// each integer will be in the range [-`range`/2, `range`/ 2]\n// integers will NOT be repeated\n//\n// length: integer\n// range: integer\nfunction generate(length, range) {\n  if (range < length) throw new Error('length must be greater than max');\n\n  const set = {};\n\n  let generated = 0;\n\n  while (generated < length) {\n    const candidate = Math.round(Math.random() * range) - (range / 2);\n\n    if (!set[candidate]) {\n      set[candidate] = true;\n      generated++;\n    }\n  }\n\n  return Object.keys(set);\n}\n\n\n// Returns true iff:\n//\n// 1) The elements of `solution` sum to 0\n// 2) Every element in `solution` exists in `problem`\n//\n// problem: array of integers\n// solution: array of integers\nfunction verify(problem, solution) {\n  if (_.sum(solution) !== 0) throw new Error('solution does not sum to 0!');\n\n  const set = _.transform(problem, (set, value) => {\n    set[value] = true;\n  });\n\n  _.each(solution, value => {\n    if (!set[value]) throw new Error(`value ${value} in solution, but not in problem!`);\n  });\n\n  return true;\n}"],"file":"ssp.js","sourceRoot":"/source/"}